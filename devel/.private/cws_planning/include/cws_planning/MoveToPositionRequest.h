// Generated by gencpp from file cws_planning/MoveToPositionRequest.msg
// DO NOT EDIT!


#ifndef CWS_PLANNING_MESSAGE_MOVETOPOSITIONREQUEST_H
#define CWS_PLANNING_MESSAGE_MOVETOPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cws_planning
{
template <class ContainerAllocator>
struct MoveToPositionRequest_
{
  typedef MoveToPositionRequest_<ContainerAllocator> Type;

  MoveToPositionRequest_()
    : position_number(0)  {
    }
  MoveToPositionRequest_(const ContainerAllocator& _alloc)
    : position_number(0)  {
  (void)_alloc;
    }



   typedef int32_t _position_number_type;
  _position_number_type position_number;





  typedef boost::shared_ptr< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToPositionRequest_

typedef ::cws_planning::MoveToPositionRequest_<std::allocator<void> > MoveToPositionRequest;

typedef boost::shared_ptr< ::cws_planning::MoveToPositionRequest > MoveToPositionRequestPtr;
typedef boost::shared_ptr< ::cws_planning::MoveToPositionRequest const> MoveToPositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cws_planning::MoveToPositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cws_planning::MoveToPositionRequest_<ContainerAllocator1> & lhs, const ::cws_planning::MoveToPositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.position_number == rhs.position_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cws_planning::MoveToPositionRequest_<ContainerAllocator1> & lhs, const ::cws_planning::MoveToPositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cws_planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae12658f95c10e0ae11cda8760cbddf8";
  }

  static const char* value(const ::cws_planning::MoveToPositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae12658f95c10e0aULL;
  static const uint64_t static_value2 = 0xe11cda8760cbddf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cws_planning/MoveToPositionRequest";
  }

  static const char* value(const ::cws_planning::MoveToPositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int32 position_number\n"
;
  }

  static const char* value(const ::cws_planning::MoveToPositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToPositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cws_planning::MoveToPositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cws_planning::MoveToPositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "position_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWS_PLANNING_MESSAGE_MOVETOPOSITIONREQUEST_H
